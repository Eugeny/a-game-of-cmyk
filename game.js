// Generated by CoffeeScript 1.4.0
(function() {
  var Board, Color, Game, Square,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Color = (function() {

    function Color(c, m, y) {
      this.c = c;
      this.m = m;
      this.y = y;
    }

    Color.prototype.copy = function() {
      return new Color(this.c, this.m, this.y);
    };

    Color.prototype.add = function(c) {
      this.c += c.c;
      this.m += c.m;
      this.y += c.y;
      this.c = Math.min(this.c, 1);
      this.m = Math.min(this.m, 1);
      return this.y = Math.min(this.y, 1);
    };

    Color.prototype.hex = function() {
      var b, g, r;
      r = 1 - this.c;
      g = 1 - this.m;
      b = 1 - this.y;
      r = Math.round(r * 255);
      g = Math.round(g * 255);
      b = Math.round(b * 255);
      return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    };

    Color.prototype.sameAs = function(b) {
      return Math.abs(this.c - b.c) + Math.abs(this.m - b.m) + Math.abs(this.y - b.y) < 0.01;
    };

    Color.prototype.apply = function(e) {
      console.log(this.c, this.m, this.y);
      console.log(this.hex());
      return $(e).css({
        'background-color': this.hex()
      });
    };

    return Color;

  })();

  Square = (function() {

    function Square(dom) {
      this.dom = dom;
      this.active = false;
    }

    Square.prototype.activate = function() {
      this.active = true;
      return this.dom.addClass('pulse');
    };

    Square.prototype.setColor = function(c) {
      this.color = c.copy();
      return this.color.apply(this.dom);
    };

    return Square;

  })();

  Board = (function() {

    function Board(dom) {
      this.dom = dom;
      this.width = 8;
      this.height = 8;
      this.dom.empty();
    }

    Board.prototype.generate = function(currentColor, mixins) {
      var colors, initialX, initialY, square, x, y, _i, _j, _ref, _ref1;
      colors = [currentColor, new Color(0.5, 0.5, 0), new Color(0.5, 1.0, 0), new Color(1.0, 1.0, 1.0)];
      this.squares = [];
      for (y = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
        this.squares.push([]);
        for (x = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
          square = new Square($("<div class=\"square\">\n</div>"));
          square.setColor(colors[Math.floor(Math.random() * colors.length)]);
          this.squares[y].push(square);
          this.dom.append(square.dom);
        }
        this.dom.append("<div class=\"newline\"></div>");
      }
      initialX = Math.floor(Math.random() * this.width);
      initialY = Math.floor(Math.random() * this.height);
      this.squares[initialY][initialX].setColor(currentColor);
      this.squares[initialY][initialX].activate();
      return this.update(currentColor);
    };

    Board.prototype.update = function(currentColor) {
      var dx, dy, i, needsAnotherRun, sq, sq2, x, y, _i, _j, _k, _l, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _results, _results1, _results2;
      _results = [];
      while (true) {
        needsAnotherRun = false;
        for (y = _i = 0, _ref = this.width; 0 <= _ref ? _i < _ref : _i > _ref; y = 0 <= _ref ? ++_i : --_i) {
          for (x = _j = 0, _ref1 = this.height; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; x = 0 <= _ref1 ? ++_j : --_j) {
            sq = this.squares[y][x];
            if (sq.active) {
              sq.setColor(currentColor);
              for (i = _k = 0; _k <= 3; i = ++_k) {
                dx = [-1, 0, 1, 0][i];
                dy = [0, 1, 0, -1][i];
                if ((_ref2 = x + dx, __indexOf.call((function() {
                  _results1 = [];
                  for (var _l = 0, _ref3 = this.width; 0 <= _ref3 ? _l < _ref3 : _l > _ref3; 0 <= _ref3 ? _l++ : _l--){ _results1.push(_l); }
                  return _results1;
                }).apply(this), _ref2) >= 0) && (_ref4 = y + dy, __indexOf.call((function() {
                  _results2 = [];
                  for (var _m = 0, _ref5 = this.height; 0 <= _ref5 ? _m < _ref5 : _m > _ref5; 0 <= _ref5 ? _m++ : _m--){ _results2.push(_m); }
                  return _results2;
                }).apply(this), _ref4) >= 0)) {
                  sq2 = this.squares[y + dy][x + dx];
                  if (!sq2.active) {
                    if (sq2.color.sameAs(currentColor)) {
                      console.log(sq2.color.hex(), '=', currentColor.hex());
                      needsAnotherRun = true;
                      sq2.activate();
                    }
                  }
                }
              }
            }
          }
        }
        if (!needsAnotherRun) {
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return Board;

  })();

  Game = (function() {

    function Game() {
      this.board = new Board($('#board'));
    }

    Game.prototype.start = function() {
      var button, mixin, mixinBox, mixins, _fn, _i, _len,
        _this = this;
      this.currentColor = new Color(0, 0, 0);
      mixins = [new Color(0.5, 0, 0), new Color(0, 0.5, 0), new Color(0, 0, 0.5)];
      mixinBox = $('#mixins');
      mixinBox.empty();
      _fn = function(mixin) {
        return button.click(function() {
          _this.currentColor.add(mixin);
          return _this.updateCurrentColor();
        });
      };
      for (_i = 0, _len = mixins.length; _i < _len; _i++) {
        mixin = mixins[_i];
        button = $("<a class=\"mixin\">+</a>");
        mixin.apply(button);
        mixinBox.append(button);
        _fn(mixin);
      }
      button = $("<a class=\"mixin\">R</a>");
      new Color(0, 0, 0).apply(button);
      mixinBox.append(button);
      button.click(function() {
        _this.currentColor.c = 0;
        _this.currentColor.m = 0;
        _this.currentColor.y = 0;
        return _this.updateCurrentColor();
      });
      this.board.generate(this.currentColor, mixins);
      return this.updateCurrentColor();
    };

    Game.prototype.updateCurrentColor = function() {
      this.currentColor.apply($('#current-color'));
      return this.board.update(this.currentColor);
    };

    return Game;

  })();

  $(function() {
    var g;
    g = new Game();
    return g.start();
  });

}).call(this);
